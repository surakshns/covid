{"version":3,"sources":["components/Tooltip.js","components/ActionsPanel.js","components/Actions.js"],"names":["Tooltip","children","message","hold","childProps","handleClick","useCallback","e","stopPropagation","className","content","dangerouslySetInnerHTML","__html","split","map","text","join","arrow","animation","touch","onClick","Timeline","lazy","retry","ActionsPanel","lastViewedLog","newUpdate","isTimelineMode","setIsTimelineMode","showUpdates","date","setDate","dates","setNewUpdate","setShowUpdates","t","useTranslation","trail","useMemo","styles","element","index","push","animationDelay","handleTimelineClick","handleBellClick","style","opacity","transform","pointerEvents","lastViewedDate","utcToZonedTime","parse","Date","format","getTimeFromMilliseconds","size","fallback","Updates","Actions","useState","useLocalStorage","setLastViewedLog","updates","useSWR","API_DOMAIN","fetcher","revalidateOnFocus","data","useEffect","undefined","lastTimestamp","slice","reverse","timestamp","isEqual","prevProps","currProps","equal","memo"],"mappings":"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","file":"static/js/31.a1dd255c.chunk.js","sourcesContent":["import Tippy from '@tippyjs/react';\r\nimport {useCallback} from 'react';\r\n\r\nimport 'tippy.js/dist/tippy.css';\r\nimport 'tippy.js/animations/shift-away.css';\r\n\r\nfunction Tooltip({children, message, hold = false, childProps = {}}) {\r\n  const handleClick = useCallback((e) => e.stopPropagation(), []);\r\n\r\n  return (\r\n    <Tippy\r\n      className=\"Tooltip\"\r\n      content={\r\n        typeof message === 'string' ? (\r\n          <p\r\n            className=\"message\"\r\n            dangerouslySetInnerHTML={{\r\n              __html: message\r\n                .split('\\n')\r\n                .map((text) => `<div>${text}</div>`)\r\n                .join(''),\r\n            }}\r\n          ></p>\r\n        ) : (\r\n          message\r\n        )\r\n      }\r\n      arrow={false}\r\n      animation=\"shift-away\"\r\n      touch={hold ? ['hold', 300] : true}\r\n    >\r\n      <div onClick={handleClick} {...childProps}>\r\n        {children}\r\n      </div>\r\n    </Tippy>\r\n  );\r\n}\r\n\r\nexport default Tooltip;\r\n","import Tooltip from './Tooltip';\r\n\r\nimport {retry} from '../utils/commonFunctions';\r\n\r\nimport {BellIcon, BellSlashIcon, HistoryIcon} from '@primer/octicons-react';\r\nimport {format, parse} from 'date-fns';\r\nimport {utcToZonedTime} from 'date-fns-tz';\r\nimport {useMemo, useCallback, lazy, Suspense} from 'react';\r\nimport {useTranslation} from 'react-i18next';\r\n\r\nconst Timeline = lazy(() => retry(() => import('./Timeline')));\r\n\r\nconst ActionsPanel = ({\r\n  lastViewedLog,\r\n  newUpdate,\r\n  isTimelineMode,\r\n  setIsTimelineMode,\r\n  showUpdates,\r\n  date,\r\n  setDate,\r\n  dates,\r\n  setNewUpdate,\r\n  setShowUpdates,\r\n}) => {\r\n  const {t} = useTranslation();\r\n\r\n  const trail = useMemo(() => {\r\n    const styles = [];\r\n\r\n    [0, 0, 0].map((element, index) => {\r\n      styles.push({\r\n        animationDelay: `${500 + index * 250}ms`,\r\n      });\r\n      return null;\r\n    });\r\n    return styles;\r\n  }, []);\r\n\r\n  const getTimeFromMilliseconds = (lastViewedLog) => {\r\n    const lastViewedDate = utcToZonedTime(\r\n      parse(lastViewedLog, 'T', new Date()),\r\n      'Asia/Kolkata'\r\n    );\r\n    return format(lastViewedDate, 'dd MMM, p');\r\n  };\r\n\r\n  const handleTimelineClick = useCallback(() => {\r\n    setIsTimelineMode(true);\r\n    if (showUpdates) setShowUpdates(!showUpdates);\r\n  }, [setIsTimelineMode, setShowUpdates, showUpdates]);\r\n\r\n  const handleBellClick = useCallback(() => {\r\n    if (!showUpdates) setNewUpdate(false);\r\n    setShowUpdates(!showUpdates);\r\n  }, [showUpdates, setShowUpdates, setNewUpdate]);\r\n\r\n  return (\r\n    <div className=\"ActionsPanel\">\r\n      <div\r\n        className=\"actions\"\r\n        style={{\r\n          opacity: isTimelineMode ? 0 : 1,\r\n          transform: `perspective(600px) rotateX(${\r\n            isTimelineMode ? 90 : 0\r\n          }deg)`,\r\n          pointerEvents: isTimelineMode ? 'none' : '',\r\n        }}\r\n      >\r\n        <h5 className=\"fadeInUp\" style={trail[0]}>{`${getTimeFromMilliseconds(\r\n          lastViewedLog\r\n        )} ${t('IST')}`}</h5>\r\n\r\n        <div\r\n          className=\"bell-icon fadeInUp\"\r\n          style={trail[1]}\r\n          onClick={handleBellClick}\r\n        >\r\n          {!showUpdates ? <BellIcon size={15} /> : <BellSlashIcon size={15} />}\r\n          {newUpdate && <div className=\"indicator\"></div>}\r\n        </div>\r\n\r\n        <Tooltip message={'Timeline'} hold>\r\n          <div\r\n            className=\"timeline-icon fadeInUp\"\r\n            onClick={handleTimelineClick}\r\n            style={trail[2]}\r\n          >\r\n            {<HistoryIcon />}\r\n          </div>\r\n        </Tooltip>\r\n      </div>\r\n\r\n      {isTimelineMode && (\r\n        <Suspense fallback={<div />}>\r\n          <Timeline\r\n            {...{date, setDate, dates, isTimelineMode, setIsTimelineMode}}\r\n          />\r\n        </Suspense>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActionsPanel;\r\n","import ActionsPanel from './ActionsPanel';\r\n\r\nimport {API_DOMAIN} from '../constants';\r\nimport {fetcher, retry} from '../utils/commonFunctions';\r\n\r\nimport equal from 'fast-deep-equal';\r\nimport {memo, useState, useEffect, lazy, Suspense} from 'react';\r\nimport {useLocalStorage} from 'react-use';\r\nimport useSWR from 'swr';\r\n\r\nconst Updates = lazy(() => retry(() => import('./Updates')));\r\n\r\nconst Actions = ({date, setDate, dates}) => {\r\n  const [showUpdates, setShowUpdates] = useState(false);\r\n  const [newUpdate, setNewUpdate] = useLocalStorage('newUpdate', false);\r\n  const [lastViewedLog, setLastViewedLog] = useLocalStorage('lastViewedLog', 0);\r\n  const [isTimelineMode, setIsTimelineMode] = useState(false);\r\n\r\n  const {data: updates} = useSWR(`${API_DOMAIN}/updatelog/log.json`, fetcher, {\r\n    revalidateOnFocus: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (updates !== undefined) {\r\n      const lastTimestamp = updates.slice().reverse()[0].timestamp * 1000;\r\n      if (lastTimestamp !== lastViewedLog) {\r\n        setNewUpdate(true);\r\n        setLastViewedLog(lastTimestamp);\r\n      }\r\n    }\r\n  }, [lastViewedLog, updates, setLastViewedLog, setNewUpdate]);\r\n\r\n  return (\r\n    <>\r\n      <ActionsPanel\r\n        {...{\r\n          lastViewedLog,\r\n          newUpdate,\r\n          isTimelineMode,\r\n          setIsTimelineMode,\r\n          showUpdates,\r\n          date,\r\n          setDate,\r\n          dates,\r\n          setNewUpdate,\r\n          setShowUpdates,\r\n        }}\r\n      />\r\n\r\n      {showUpdates && (\r\n        <Suspense fallback={<div />}>\r\n          <Updates {...{updates}} />\r\n        </Suspense>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst isEqual = (prevProps, currProps) => {\r\n  if (!equal(currProps.date, prevProps.date)) {\r\n    return false;\r\n  } else if (!equal(currProps.dates, prevProps.dates)) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport default memo(Actions, isEqual);\r\n"],"sourceRoot":""}